package mocks

import gateways "github.com/yuderekyu/covenant/gateways"
import mock "github.com/stretchr/testify/mock"
import models "github.com/yuderekyu/covenant/models"
import uuid "github.com/pborman/uuid"

// Covenant is an autogenerated mock type for the Covenant type
type Covenant struct {
	mock.Mock
}

// DeleteSubscription provides a mock function with given fields: id
func (_m *Covenant) DeleteSubscription(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllSubscription provides a mock function with given fields: offset, limit
func (_m *Covenant) GetAllSubscription(offset int, limit int) ([]*models.Subscription, error) {
	ret := _m.Called(offset, limit)

	var r0 []*models.Subscription
	if rf, ok := ret.Get(0).(func(int, int) []*models.Subscription); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionById provides a mock function with given fields: id
func (_m *Covenant) GetSubscriptionById(id uuid.UUID) (*models.Subscription, error) {
	ret := _m.Called(id)

	var r0 *models.Subscription
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Subscription); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscription provides a mock function with given fields: newSubscription
func (_m *Covenant) NewSubscription(newSubscription *models.Subscription) (*models.Subscription, error) {
	ret := _m.Called(newSubscription)

	var r0 *models.Subscription
	if rf, ok := ret.Get(0).(func(*models.Subscription) *models.Subscription); ok {
		r0 = rf(newSubscription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Subscription) error); ok {
		r1 = rf(newSubscription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscription provides a mock function with given fields: id
func (_m *Covenant) UpdateSubscription(id uuid.UUID) (*models.Subscription, error) {
	ret := _m.Called(id)

	var r0 *models.Subscription
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.Subscription); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ gateways.Covenant = (*Covenant)(nil)
