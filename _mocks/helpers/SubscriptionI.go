package mocks

import helpers "github.com/yuderekyu/covenant/helpers"
import mock "github.com/stretchr/testify/mock"
import models "github.com/yuderekyu/covenant/models"

// SubscriptionI is an autogenerated mock type for the SubscriptionI type
type SubscriptionI struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *SubscriptionI) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionI) GetAll(_a0 int, _a1 int) ([]*models.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*models.Subscription
	if rf, ok := ret.Get(0).(func(int, int) []*models.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0
func (_m *SubscriptionI) GetByID(_a0 string) (*models.Subscription, error) {
	ret := _m.Called(_a0)

	var r0 *models.Subscription
	if rf, ok := ret.Get(0).(func(string) *models.Subscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRoaster provides a mock function with given fields: _a0, _a1, _a2
func (_m *SubscriptionI) GetByRoaster(_a0 string, _a1 int, _a2 int) ([]*models.Subscription, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*models.Subscription
	if rf, ok := ret.Get(0).(func(string, int, int) []*models.Subscription); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *SubscriptionI) GetByUser(_a0 string, _a1 int, _a2 int) ([]*models.Subscription, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*models.Subscription
	if rf, ok := ret.Get(0).(func(string, int, int) []*models.Subscription); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *SubscriptionI) Insert(_a0 *models.Subscription) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Subscription) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStatus provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionI) SetStatus(_a0 string, _a1 models.SubscriptionStatus) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.SubscriptionStatus) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionI) Update(_a0 string, _a1 *models.Subscription) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.Subscription) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ helpers.SubscriptionI = (*SubscriptionI)(nil)
